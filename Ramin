import numpy as np
import subprocess


## setting up arrays to print in a ram in file
parameters0 = np.zeros((1,3))
parameters0[0,1] = 5.0
##############
parameters1 = np.zeros((1,3))
parameters1[0,0] = 50000.
parameters1[0,1] = 20.
parameters1[0,2] = 1
##############
parameters2 = np.zeros((1,4))
parameters2[0,0] = 8000.
parameters2[0,1] = 1.0 
parameters2[0,2] = 1
parameters2[0,3] = 200.
##############
parameters3 = np.zeros((1,4))
parameters3[0,0] = 1600.
parameters3[0,1] = 8
parameters3[0,2] = 1
parameters3[0,3] = 0.
##############
parameters4 = np.zeros((3,2))
parameters4[0,0] = 0.
parameters4[0,1] = 2000. 
parameters4[1,0] = 25000.
parameters4[1,1] = 2000.
parameters4[2,0] = 50000.
parameters4[2,1] = 2000.
##############
parameters5 = np.zeros((1,2))
parameters5[0,0] = -1
parameters5[0,1] = -1
##############
parameters6 = np.zeros((1,2))
parameters6[0,0] = -1
parameters6[0,1] = -1 
##############
parameters7 = np.zeros((1,2))
parameters7[0,0] = 0.
parameters7[0,1] = 1700.
##############
parameters8 = np.zeros((1,2))
parameters8[0,0] = -1
parameters8[0,1] = -1
##############
parameters9 = np.zeros((1,2))
parameters9[0,0] = 0.
parameters9[0,1] = 1.5
##############
parameters10 = np.zeros((1,2))
parameters10[0,0] = -1
parameters10[0,1] = -1 
##############
parameters11 = np.zeros((3,2))
parameters11[0,0] = 0.
parameters11[0,1] = 0.5
parameters11[1,0] = 9000.
parameters11[1,1] = 0.5
parameters11[2,0] = 10000.
parameters11[2,1] = 10.
##############
parameters12 = np.zeros((1,2))
parameters12[0,0] = -1
parameters12[0,1] = -1

def Coppen(D,S,t):
    """
    Inputs:
        D - array, depth in kilometres
        S - array, salinity in parts per thousand
        t - array, T/10 where T = temperature in degrees Celsius
        
    Returns:
        v - array, sound velocity.
    """
    D=D/1000.
    t=t/10.
    A=(16.23+0.253*t)*D+(0.213-0.1*t)*D**2+(0.016+0.0002*(S-35))*(S-35)*t*D
    B=1449.05+45.7*t-5.21*t**2+0.23*t**3+(1.333-0.126*t+0.009*t**2)*(S-35)
    return A+B

depths = np.loadtxt('NS_HYCOM_depth.txt',delimiter=',')
salinity = np.loadtxt('NS_HYCOM_salt.txt',delimiter=',')
Temperature = np.loadtxt('NS_HYCOM_temp.txt',delimiter=',')
speed = Coppen(depths,salinity,Temperature)
def Ramin(speed, frequency=20,rd=20):
    """
    Writes the ram.in text file for the ram.exe model.
    
    Inputs:
        rd - receiver depth in meters
    Returns:
        a Ram.in file 
    """
    parameters0[0,0] = frequency
    parameters0[0,2] = rd
    NAMES  = np.array(["Auto generated ram.in; day 5112, frequency 20Hz"])
    np.savetxt('Ram1.in',NAMES,fmt='%s')
    temp = file('Ram1.in','a')
    np.savetxt(temp,parameters0,fmt ='%f')
    np.savetxt(temp,parameters1,fmt ='%f %f %i' )
    np.savetxt(temp,parameters2,fmt ='%f %f %i %f')
    np.savetxt(temp,parameters3,fmt ='%f %i %i %f')
    np.savetxt(temp,parameters4,fmt ='%f')
    np.savetxt(temp,parameters5,fmt ='%i')
    np.savetxt(temp,np.column_stack((depths,speed)),fmt='%f')
    np.savetxt(temp,parameters6,fmt ='%i')
    np.savetxt(temp,parameters7,fmt ='%f')
    np.savetxt(temp,parameters8,fmt ='%i')
    np.savetxt(temp,parameters9,fmt ='%f')
    np.savetxt(temp,parameters10,fmt ='%i')
    np.savetxt(temp,parameters11,fmt ='%f')
    np.savetxt(temp,parameters12,fmt ='%i')
    temp.close()


def output(fr,rd,N,speed_day,FD=False):
    Data = np.arange(20,50020,20) 
    if FD == False:
        Title = np.array(["Data of day %s,at Depth %s of frequency from %s to %s Hz divided into %s sections"%(speed_day+1,rd,fr[0],fr[1],N)])
        np.savetxt('%s.txt'%(speed_day+1),Title,fmt='%s')
        fre = np.linspace(fr[0],fr[1],N)
        for i in fre:
            Ramin(speed[speed_day], frequency=i,rd=rd)
            subprocess.Popen('ram.exe')
            tmp=np.loadtxt('tl.line')
            Data = np.column_stack((Data,tmp[:,1]))
    else:
        Title = np.array(["Data of day %s,at Depth from %s to %s m divided into %s sections,of frequency %s Hz"%(speed_day+1,rd[0],rd[1],N,fr)])
        np.savetxt('%s.txt'%(speed_day+1),Title,fmt='%s')
        RD = np.linspace(rd[0],rd[1],N)
        for j in RD:
            Ramin(speed[speed_day], frequency=fr,rd=j)
            subprocess.Popen('ram.exe')
            tmp=np.loadtxt('tl.line')
            Data = np.column_stack((Data,tmp[:,1]))
    tmp1 = file('%s.txt'%(speed_day+1),'a')
    np.savetxt(tmp1,Data,fmt ='%f')
